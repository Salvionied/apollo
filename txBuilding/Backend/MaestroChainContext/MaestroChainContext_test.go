package MaestroChainContext_test

// func TestNewContext(t *testing.T) {
// 	mcc, _ := MaestroChainContext.NewMaestroChainContext(
// 		0, APIKEY,
// 	)
// 	bfc := BlockFrostChainContext.NewBlockfrostChainContext(
// 		"https://cardano-mainnet.blockfrost.io/api", 0, BFSAPIKEY,
// 	)
// 	addr, _ := Address.DecodeAddress("addr1w9njr6lzw9n9tprksvu5m29h3e3t97wn237yuntzqz5fy8cjpjd7e")
// 	val := hex.EncodeToString(addr.PaymentPart)
// 	fmt.Println(val)
// 	x := mcc.GetContractCbor(val)
// 	y := bfc.GetContractCbor(val)
// 	if x != y {
// 		t.Error("Contexts are not equal")
// 	}
// 	fmt.Println("X:", x, "\n", "Y:", y)
// 	// txCbor := "84a8008182582031d3abaadf063d64e39aaa68558957131a7786b13f74acef0d838c60b7edf813010181825839010ce07c6ada11952b554257078f49890495c9367f2c858997dcca04f0af3842545b1dd6c3c3c324d0b49fd9f8fd609b950b2322affdec7a1a821a0056d1f1a1581cf50b8f3b83997a36d15f5f824c94718957ac348905af2c3072de31fca144534e494b1a0001335b021a0004bb8f031a072f25b7081a072f22330b58202f4830eb88dc8630d78a6d776fc6e52105670faa79aab094b0363fd8e270e0dd0d818258209bdfe6f16c1c2e05ebe8d63dbfc4e6321312edb512fb6a22bc310348c68383a8000e83581c0ce07c6ada11952b554257078f49890495c9367f2c858997dcca04f0581c0ce07c6ada11952b554257078f49890495c9367f2c858997dcca04f0581caf3842545b1dd6c3c3c324d0b49fd9f8fd609b950b2322affdec7a1aa400818258203e5e0a1fb6eb9f9f525ac5aa8869e2b34566ca0b2c0f74821c8a9efe8e44368b5840b5658937c8022eba4186407866faffd856478de81a83f19048a571445c2609ca1f50706e2af687b7249336cb8e3a7791687c0a70016db73110c59fe2c125e907068159067059066d0100003232323232323232322223232533300832323232533300c3370e9001180580089919191919191919191919191919191919299980e99b87480000144cc0040500384c8c94ccc07cccccccc8c8c8888888c8c8c8c8c8c94ccc0b8cdc3a4000605a00226464646464a66606666ebcc068c0c4008cdd2a40086606e01e97ae01533303332333001001002011222533303900114a2264646464646464646464a66608066ebcc084c0f8014c084c0f802854ccc100cdd799299982099b87480000045854ccc104cdc3a40080022608c607e00426464a66608666e1d20003042001130483041001163322323300100100322533304900114c0103d87a8000132323232533304a3371e00e004266e9520003304e0014bd7009980300300198258019bae3049002304d002304b0013756608e609060906090609060906090609060906090609060800400026eb8c118c0fc008c0fc004c09cc0f802854ccc100c8c8c8c94ccc11cc1280084c8c8c8c94ccc120cdc7802244100153330483371e004046266ebcdd31982619bb037520446ea00212f5bded8c06e980045280a99982419b8f00402313375e6e98cc130cdd81ba9022375001097adef6c60374c0062940dd598248021bae30470033756608e0086eb8c11400c58c120004c120014c118010dd69812981f00509998068068038048a5014a02940c110004c110008dd5982100098210011820000981c001181f802981e802181e801181d800899991119b8733301c00300200132333001001014480008894ccc0f000840044ccc00c00cc0fc008cc88cdc00009bad30203039002303e0020013756603060626030606200801c01a2940528181c001181b00099807802004981a00098160008b19198008008029129998190008a6103d87a80001323253330313375e6024605e00401a266e952000330350024bd70099802002000981b001181a0009bac3031001303100130300023758605c002604c00c6002002444a66604666e1c00520001002133300300330290023370200290011181280080b00400900600500089980180b0070a50375a604600260360324464a66603e66e1d200000113322323300100100322533302600114a026464a66604a66e3c00801452889980200200098150011bae302800137586048604a604a604a604a604a604a604a604a603a0066eb8c090c0740084c8c8c8c8cc88c8cc00400400c894ccc0a800452809919299981498028010a51133004004001302e002302c00137586014604200e466e1cccc028dd598049811000802001240046eb8c09c004c09c008dd71812800980e801180e80091810981100091119199119299981099b874800800440084dd69813180f801980f80119299980f99b87480080045300103d87a8000132323300100100222533302500114c103d87a800013232323253330263371e014004266e9520003302a375000297ae0133006006003375a604e0066eb8c094008c0a4008c09c004dd59812180e801180e800a4000646600200200844a6660440022980103d87a800013232323253330233371e010004266e95200033027374c00297ae0133006006003375660480066eb8c088008c098008c0900048c07cc080c080004c05c050dd6180e000980e0011bae301a001301a002375c60300026030004602c002602c00460280026018016602400260140022c60200026020004601c002600c0062930b19299980419b874800000454ccc02cc01801052616153330083370e900100089919299980698080010a4c2c6eb4c038004c01801058c01800ccc88c94ccc024cdc3a4000002264646464646464646464a66602c6032004264646493191980080080211299980d0008a4c26466006006603c0046464a66603266e1d2000001132323232323253330223025002132498c94ccc080cdc3a400000226464a66604a60500042930b1bae3026001301e006153330203370e900100089919299981298140010a4c2c6eb8c098004c07801858c07801458c08c004c08c008dd698108009810801180f800980b8010b180b800980e000980700418068048b1bac30170013017002375c602a002602a0046eb8c04c004c04c008c044004c044008c03c004c01c00858c01c0048c94ccc020cdc3a400000226464a66601a60200042930b1bae300e0013006002153330083370e9001000899191919299980798090010a4c2c6eb8c040004c040008dd7180700098030010b1803000801918029baa001230033754002ae6955ceaab9e5573eae815d0aba21049fd87985d8799f581c0ce07c6ada11952b554257078f49890495c9367f2c858997dcca04f0ffd8799f581cffebcc9e31749eb5803e396202d84e3b436ec362463b2fd70fb4c881ff581cf50b8f3b83997a36d15f5f824c94718957ac348905af2c3072de31fc44534e494b81d8799fd87a9f581ca65ca58a4e9c755fa830173d2a5caed458ac0c73f97db7faae2e7e3bff1a0001335bd8799fd8799fd8799f581c0ce07c6ada11952b554257078f49890495c9367f2c858997dcca04f0ffd8799fd8799fd8799f581caf3842545b1dd6c3c3c324d0b49fd9f8fd609b950b2322affdec7a1affffffffd8799fd8799f581c0ce07c6ada11952b554257078f49890495c9367f2c858997dcca04f0ffd8799fd8799fd8799f581caf3842545b1dd6c3c3c324d0b49fd9f8fd609b950b2322affdec7a1affffffffd87a80d8799fd8799f4040ff1a11062c12ff1a001e84801a001e8480ffffff0581840000d87980821a000133b71a019afaabf5f6"
// 	// decodedCbor, _ := hex.DecodeString(txCbor)

// 	// res := mcc.EvaluateTx(decodedCbor)
// 	//fmt.Println(res)
// 	// tx := Transaction.Transaction{}
// 	// err := cbor.Unmarshal(decodedCbor, &tx)
// 	// if err != nil {
// 	// 	t.Error(err)
// 	// }

// 	// sub, err := mcc.SubmitTx(tx)
// 	// if err != nil {
// 	// 	t.Error(err)
// 	// }
// 	// fmt.Println(sub)
// }

// func TestXx(t *testing.T) {
// 	txHash := "7f9b94e82bc349a102efee8f55b2b7633f577c795221c2f03a47d9cf63c911de"
// 	txIndex := 0
// 	apikey := "preprod9zzl4g8Xa3faU50a1OVDZdPeQ92ZsdcT"
// 	base_url := "https://cardano-preprod.blockfrost.io/api"

// 	bfc := BlockFrostChainContext.NewBlockfrostChainContext(
// 		base_url, 0, apikey,
// 	)

// 	utxo := bfc.GetUtxoFromRef(txHash, txIndex)
// 	fmt.Println(utxo)
// 	t.Error(utxo)
// }

// type BoolTest struct {
// 	_    struct{} `plutusType:"DefList"`
// 	Val0 bool     `plutusType:"Bool"`
// }

// func TestBoolStruct(t *testing.T) {
// 	bt := BoolTest{
// 		Val0: true,
// 	}
// 	plutus, err := plutusencoder.MarshalPlutus(bt)
// 	if err != nil {
// 		t.Error(err)
// 	}
// 	marshaled, _ := cbor.Marshal(plutus)
// 	t.Log(hex.EncodeToString(marshaled))
// 	newBt := BoolTest{}
// 	err = plutusencoder.UnmarshalPlutus(plutus, &newBt, 1)
// 	if err != nil {
// 		t.Error(err)
// 	}
// 	t.Error(newBt)

// }

// type DatumTest struct {
// 	_      struct{} `plutusType:"DefList"`
// 	Field0 []string `plutusType:"DefList"`
// }

// type BBS struct {
// 	Field string `plutusType:"ByteString"`
// }

// func TestBBS(t *testing.T) {
// 	dt := DatumTest{
// 		Field0: []string{"Hello", "World"},
// 	}
// 	plutus, err := plutusencoder.MarshalPlutus(dt)
// 	if err != nil {
// 		t.Error(err)
// 	}
// 	marshaled, _ := cbor.Marshal(plutus)
// 	t.Log(hex.EncodeToString(marshaled))
// 	newDt := DatumTest{}
// 	err = plutusencoder.UnmarshalPlutus(plutus, &newDt, 1)
// 	if err != nil {
// 		t.Error(err)
// 	}
// 	t.Error(newDt)

// }
